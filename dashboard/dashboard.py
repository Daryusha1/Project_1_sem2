import streamlit as st
import pandas as pd
import plotly.express as px
from wordcloud import WordCloud, STOPWORDS
import matplotlib.pyplot as plt
import random

# –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", layout="wide")

data_files = {
    "—Å –ë–ª–∏–Ω–æ–≤—Å–∫–æ–π": "data/sobchak_blinovskaya_ready_with_date.csv",
    "—Å –ë—É–∑–æ–≤–æ–π": "data/sobchak_buzova_ready_with_date.csv",
    "—Å –ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω–æ–º": "data/sobchak_morgenstern2_ready_with_date.csv",
}

# —Å—Ç–∏–ª—å
st.markdown("""
    <style>
    html, body, [class*="css"] {
        font-family: 'Poppins', sans-serif;
    }
    h1, h2, h3, h4 {
        font-family: 'Poppins', sans-serif;
        font-weight: 700;
        color: #4B0082;
    }
    button {
        border-radius: 8px;
    }
    div.stButton > button:first-child {
        background-color: #e0c3fc;
        color: #4B0082;
        border: none;
        padding: 0.75em 1.5em;
        border-radius: 10px;
        font-weight: 600;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }
    div.stButton > button:first-child:hover {
        background-color: #d1b3ec;
        color: #38006b;
    }
    p {
        font-weight: 400;
    }
    </style>
""", unsafe_allow_html=True)

# –ó–ê–ì–û–õ–û–í–û–ö
st.markdown("<h1 style='text-align: center; color: #6c5ce7;'>üé¨ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ —Ç—Ä–µ–º—è —Å–∞–º—ã–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ö—Å–µ–Ω–∏–∏ –°–æ–±—á–∞–∫</h1>", unsafe_allow_html=True)

# –í–´–ë–û–† –í–ò–î–ï–û
video = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é:", list(data_files.keys()))

# –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(file_path):
    df = pd.read_csv(file_path)

    if 'sentiment' in df.columns:
        df['sentiment'] = df['sentiment'].astype(str).str.upper().str.strip()
        df = df[df['sentiment'].isin(['POSITIVE', 'NEUTRAL', 'NEGATIVE'])]

    if 'publishedAt' in df.columns and 'published_at' not in df.columns:
        df['published_at'] = pd.to_datetime(df['publishedAt']).dt.date
    elif 'published_at' in df.columns:
        df['published_at'] = pd.to_datetime(df['published_at']).dt.date

    return df

try:
    df = load_data(data_files[video])
except FileNotFoundError:
    st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_files[video]}")
    st.stop()

# –°–¢–û–ü-–°–õ–û–í–ê 
russian_stopwords = set(STOPWORDS)
russian_stopwords.update([
    "—ç—Ç–æ", "–∫–∞–∫", "–≤", "–Ω–∞", "—è", "—Å", "—á—Ç–æ", "–æ–Ω", "–æ–Ω–∞", "–º—ã", "–≤—ã", "—É",
    "–∫", "–æ—Ç", "–¥–æ", "–∑–∞", "–ø–æ", "–∏–∑", "–ø–æ–¥", "–±–µ–∑", "–¥–ª—è", "–∏", "–Ω–æ", "–¥–∞",
    "–∏–ª–∏", "—Ç–æ", "–∂–µ", "–±—ã", "–±—ã—Ç—å", "–∏—Ö", "—Ç–∞–∫", "—Ç–æ–∂–µ", "–æ—á–µ–Ω—å", "–µ—â–µ"
])

# —Ü–≤–µ—Ç–∞
pastel_colors = px.colors.qualitative.Pastel

# --- –í–ö–õ–ê–î–ö–ò ---
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs(["üìã –°–≤–æ–¥–∫–∞", "‚òÅÔ∏è –û–±–ª–∞–∫–æ —Å–ª–æ–≤", "üìä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "üèÜ –¢–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", "üìù –õ–∞–π–∫–∏", "üìÖ –î–∏–Ω–∞–º–∏–∫–∞", "üß† –í—ã–≤–æ–¥—ã"])

# –°–í–û–î–ö–ê 
with tab1:
    st.header("üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.subheader(f"–ò–Ω—Ç–µ—Ä–≤—å—é: {video}")
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(df)}")
    st.dataframe(df.head(10))

# –û–ë–õ–ê–ö–û –°–õ–û–í 
with tab2:
    st.header("‚òÅÔ∏è –û–±–ª–∞–∫–æ —Å–ª–æ–≤ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    text = " ".join(df['clean_text'].dropna())
    filtered_words = [word for word in text.split() if word.lower() not in russian_stopwords]
    filtered_text = " ".join(filtered_words)

    regenerate = st.button("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–∞–∫–æ —Å–ª–æ–≤")

    if filtered_text and (regenerate or not regenerate):
        wordcloud = WordCloud(
            width=800,
            height=400,
            background_color='white',
            colormap=random.choice(['Pastel1', 'Pastel2', 'cool', 'spring']),
            max_words=200
        ).generate(filtered_text)

        fig, ax = plt.subplots(figsize=(10, 5))
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis('off')
        st.pyplot(fig)
    else:
        st.warning("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤.")

# –¢–û–ù–ê–õ–¨–ù–û–°–¢–¨
with tab3:
    st.header("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    if 'sentiment' in df.columns:
        fig = px.pie(df, names='sentiment', title="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", hole=0.4, color_discrete_sequence=pastel_colors)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.")

# –¢–û–ü –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í 
with tab4:
    st.header("üèÜ –¢–æ–ø-5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –ª–∞–π–∫–∞–º")
    if 'likes' in df.columns:
        for sentiment in ['POSITIVE', 'NEUTRAL', 'NEGATIVE']:
            st.subheader(sentiment.capitalize())
            subset = df[df['sentiment'] == sentiment].sort_values(by='likes', ascending=False).head(5)
            if not subset.empty:
                for idx, row in subset.iterrows():
                    st.markdown(f"<div style='background-color: #dfe6e9; padding: 10px; border-radius: 5px; margin-bottom: 10px;'>"
                                f"<b>üëç {row['likes']} –ª–∞–π–∫–æ–≤</b><br>{row['text']}</div>", unsafe_allow_html=True)
            else:
                st.write("–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —ç—Ç–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–∞–π–∫–∞—Ö.")

# –õ–ê–ô–ö–ò
with tab5:
    st.header("üìù –õ–∞–π–∫–∏ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º")
    if 'likes' in df.columns:
        likes_by_sentiment = df.groupby('sentiment')['likes'].sum().reset_index()
        fig = px.bar(likes_by_sentiment, x='sentiment', y='likes', color='sentiment', text='likes', color_discrete_sequence=pastel_colors)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–∞–π–∫–∞—Ö.")

# –î–ò–ù–ê–ú–ò–ö–ê 
with tab6:
    st.header("üìÖ –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º")
    if 'published_at' in df.columns:
        daily_sentiment = df.groupby(['published_at', 'sentiment']).size().reset_index(name='counts')
        fig = px.line(daily_sentiment, x='published_at', y='counts', color='sentiment', markers=True,
                      title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º", color_discrete_sequence=pastel_colors)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

# –í–´–í–û–î–´
with tab7:
    st.header("–í—ã–≤–æ–¥—ã –ø–æ –≥–æ—Å—Ç—è–º")

    positive_count = (df['sentiment'] == 'POSITIVE').sum()
    neutral_count = (df['sentiment'] == 'NEUTRAL').sum()
    negative_count = (df['sentiment'] == 'NEGATIVE').sum()

    col1, col2, col3 = st.columns(3)
    col1.success(f"‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {positive_count}")
    col2.info(f"‚ûñ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {neutral_count}")
    col3.error(f"‚ùå –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {negative_count}")

    st.markdown("---")

    max_sentiment = max(
        [('–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ', positive_count), ('–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ', neutral_count), ('–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ', negative_count)],
        key=lambda x: x[1]
    )[0]

    if max_sentiment == '–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ':
        st.success("–ò—Ç–æ–≥: —Å–∫–æ—Ä–µ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –≥–æ—Å—Ç—è!")
    elif max_sentiment == '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ':
        st.info("–ò—Ç–æ–≥: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –≥–æ—Å—Ç—è!")
    else:
        st.error("–ò—Ç–æ–≥: —Å–∫–æ—Ä–µ–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –≥–æ—Å—Ç—è...")
